
一、Spring IoC容器
1.Spring Bean的生命周期
初始化
依赖注入
接口BeanNameAware#setBeanName()
接口BeanFactoryAware#setBeanFactory()
接口ApplicationContextAware#setApplicationContext()(需要容器实现ApplicationContext接口才会被调用)
接口BeanPostProcessor#postProcessBeforeInitialization()(针对全部Bean生效)
注解@PostConstruct标注方法(自定义初始化方法)
接口InitializingBean#afterPropertiesSet()
接口BeanPostProcessor#postProcessAfterInitialization()(针对全部Bean生效)
生存期
注解@PreDestroy标注方法(自定义销毁方法)
接口DisposableBean#destory()

其中：
1.1 只有BeanPostProcessor是针对所有Bean而言的，而其他节点都是针对单个Bean而言的；
1.2 只有容器实现了ApplicationContext接口才会调用ApplicationContext的setApplicationContext()方法，
而Spring IoC容器最低要求是实现BeanFactory接口；
1.3 如果Bean定义使用的是第三方的类，可以使用注解@Bean来配置自定义初始化和销毁方法，如：
@Bean(initMethod = "init", destroyMethod = "destroy")

2.使用属性文件
@Value("${database.url}")
2.1 属性上使用@Value注解，不会调用setter方法，即对应的setter方法不会被调用
2.2 在setter方法上使用@Value注解，会调用setter方法
@ConfigurationProperties("database")
2.3 此种方式会调用属性对应的setter方法
@PropertySource(value = {"classpath:jdbc.properties"}, ignoreResourceNotFound = true)
2.4 指定属性文件

3.条件装配Bean
@Conditional(DatabaseConditional.class)
DatabaseConditional实现Condition接口，实现matches方法；

4.Bean的作用域
4.1 在Web容器中，存在页面/page、请求/request、会话/session、应用/application4中作用域；
对于页面/page，是针对JSP当前页面的作用域，所以Spring是无法支持的；
4.2 Spring作用域类型
4.2.1 singleton         所有Spring应用      默认值，IoC容器只存在单例
4.2.2 prototype         所有Spring应用      每当从IoC容器中取出一个Bean，则创建一个新的Bean
4.2.3 session           Spring Web应用      HTTP会话
4.2.4 application       Spring Web应用      Web工程生命周期，可以使用singleton来替代
4.2.5 request           Spring Web应用      Web工程单次请求（request）
4.2.5 globalSession     Spring Web应用      在一个全局的HTTP Session中，一个Bean定义对应一个实例。实践中基本不使用

ConfigurableBeanFactory只提供单例/SCOPE_SINGLETON和原型/SCOPE_PROTOTYPE两种作用域；
SpringMVC环境中，使用WebApplicationContext提供请求/SCOPE_REQUEST、会话/SCOPE_SESSION和应用SCOPE_APPLICATION；

5.@Profile
5.1 在Spring中存在2个参数提供配置，以修改启动Profile机制；
5.1.1 spring.profiles.active
5.1.2 spring.profiles.default
如果两个属性都没有配置，Spring将不会启动Profile机制，即被@Profile标注的Bean将不会被Spring装配到IoC容器中；
Spring先断定是否存在spring.profiles.active配置后，再去查找spring.profiles.default配置；
Java启动项目中，增加如下配置启动Profile机制：
JAVA_OPTS="-Dspring.profiles.active=dev"

6.引入XML配置Bean
6.1 定义spring的xml文件，里面配置好pojo信息；
spring-other.xml
6.2 在Java配置文件中直接载入上面定义的xml文件；
@ImportResource(value = {"classpath:spring-other.xml"})

7.Spring EL
7.1 #{}代表启用Spring表达式
7.2 @Value("#{T(System).currentTimeMillis()}")
其中T(...)代表引入类，除了默认加载包，其他都必须写全限定名；
7.3 @Value("#{user.note?.toUpperCase()}")
其中?用来判断这个属性是否为空，如果不为空，则执行toUpperCase方法；

二、Spring AOP
1.约定编程
调用proxy对象的方法时，其执行流程如下：
a.使用proxy调用方法时，会先执行拦截器的before方法；
b.如果拦截器的useAround()方法返回true，则执行拦截器的around方法，而不调用target对象对应的方法，
但around方法的参数invocation对象存在一个proceed方法，它可以调用target对象对应的方法；
如果useAround方法返回false，则直接调用target对象的事件方法；
c.无论结果如何，在完成之前的事情后，都会执行拦截器的after方法；
d.在执行around方法或者回调target的事件方法时，如果发生异常，则执行拦截器的afterThrowing方法；
如果没有发生异常，则执行afterReturing方法；

2.AOP概念
AOP最为典型的应用实际就是数据库事务的管控；
AOP还可以减少大量重复的工作；
Spring AOP是一种基于方法的AOP，它只能应用于方法上；

2.1AOP术语和流程
2.1.1 连接点/join point：对应的是具体被拦截的对象，因为Spring只能支持方法，所以被拦截的对象往往就是指特定的方法；
2.1.2 切点/point cut：切面是多个类的不同方法时，通过正则式和指示器的规则定义，适配连接点；
2.1.3 通知/advice：按照约定的流程下的方法，分为前置通知/before advice、后置通知/after advice、环绕通知/around advice、
事后返回通知/afterReturning advice和异常通知/afterThrowing advice；
2.1.4 目标对象/target：即被代理对象；
2.1.5 引入/introduction：是指引入新的类和其方法，增强现有Bean的功能；
2.1.6 织入/weaving：通过动态代理技术，为原有服务对象生成代理对象，然后将与切点定义匹配的连接点拦截，并按约定将各类通知织入约定流程的过程；
2.1.7 切面/aspect：是一个可以定义切点、各类通知和引入的内容，Spring AOP将通过它的信息来增强Bean功能或者将对应的方法织入流程；

2.2 Spring AOP开发
Spring以@Aspect作为切面声明；

2.2.1 切点
切点的作用：向Spring描述那些类的哪些方法需要启用AOP编程；
使用@Pointcut来定义切点，标注在方法上，则后面的通知注解中就可以使用该方法名称来定义了；
正则式剖析：
execution(* org.transformers.aop.aspect.service.impl.UserServiceImpl.printUser(..))
其中：
    execution 表示在执行时，拦截里面的正则匹配的方法；
    * 表示任意返回类型的方法
    org.transformers.aop.aspect.service.impl.UserServiceImpl 指定目标对象的全限定名
    printUser 指定目标对象的方法
    (..) 表示任意参数进行匹配

2.2.2 通知
前置通知/before advice、后置通知/after advice、
事后返回通知/afterReturning advice、异常通知/afterThrowing advice；

2.2.3 环绕通知
环绕通知是所有通知中最为强大的通知；
一般而言，使用场景是在需要大幅度修改原有目标对象的服务逻辑时，否则应尽量使用其他的通知；
环绕通知是一个取代原有目标对象方法的通知，当然也提供了回调原有目标对象方法的能力；

2.2.4 引入
UserService.printUser，当user为null时，不打印，抛出异常；
假定UserService是第三方提供的，不能修改，这时使用Spring来增强这个接口的功能，为这个接口引入新的接口；
@DeclareParents引入新的类来增强服务，有2个必须配置的属性value和defaultImpl；
其中：
    value：指向你要增强功能的目标对象；
    defaultImpl：引入增强功能的类；

2.2.5 通知获取参数
2.2.5.1 在前置通知中获取参数
    @Before("pointCut() && args(user)")
    public void beforeParam(JoinPoint point, User user) {
JoinPoint类型的参数是对于非环绕通知而言的，Spring AOP会自动地把它传递到通知中；
对于环绕通知而言，使用ProceedingJoinPoint类型的参数；

2.2.6 织入
织入是一个生成动态代理对象，并且将切面和目标对象方法编制成为约定流程的过程；

